BabystepGiantstepView_0=Shanks Babystep-Giantstep-Algorithmus
BabystepGiantstepView_2=In dieser Visualisierung von Shanks Babystep-Giantstep-Algorithmus geht es um das Problem, diskrete Logarithmen zu berechnen. Wir wollen den diskreten Logaritmus\r\nvon a zur Basis g in G berechnen. Sei G eine endliche zyklische Gruppe der Ordnung n und sei g ein Erzeuger dieser Gruppe mit neutralem Element 1 in G.\r\nFerner sei a ein Gruppenelement. Gesucht ist die kleinste nicht negative ganze Zahl x, für die gilt: a = g ^ x mod G
BabystepGiantstepView_25=In Schritt 2 berechnen wir die Gruppenordnung und die obere Schranke der Gruppenordnung. Wir nutzen die obere Schranke für die Berechnung der Baby- und Giantsteps. \r\nDie multiplikative Inverse des Erzeugers in mod G brauchen wir für die Berechnung der Babysteps im nächsten Schritt. \r\nWir machen den Ansatz x = q * m + r, 0 <= r < m, dabei ist r der Rest und q ist der Quotient der Division von x durch m. 
BabystepGiantstepView_26=Weiter zu Schritt 2
BabystepGiantstepView_27=Schritt 2
BabystepGiantstepView_28=Gruppenordnung (n):
BabystepGiantstepView_29=Obere Schranke: m = \u23BE \u221A(n) \u23CB:
BabystepGiantstepView_3=Schritt 1 - Eingabe der Parameter
BabystepGiantstepView_30=Multiplikative Inverse (Inv):
BabystepGiantstepView_4=Eingabe der zyklischen Gruppe (G \u2208 Prim, G > 1):
BabystepGiantstepView_41=Der Babystep-Giantstep-Algorithmus berechnet q und r. Dafür benutzen wir x = q * m + r und setzen es in die Gleichung a = g ^ x = g ^ (q * m + r) ein.\r\nDaraus folgt a * g ^ - r = (g ^ m) ^ q. Wir berechnen zuerst die Menge der Babysteps B={(r, a * g ^ - r): 0 <= r < m}.
BabystepGiantstepView_42=Der Babystep-Giantstep-Algorithmus berechnet q und r. Dafür benutzen wir x = q * m + r und setzen es in die Gleichung a = g ^ x = g ^ (q * m + r) ein.\r\nDaraus folgt a * g ^ - r = (g ^ m) ^ q. Wir berechnen zuerst die Menge der Babysteps B={(r, a * g ^ - r): 0 <= r < m}.\r\nFalls wir ein Paar (r, 1) finden, so können wir x = r setzen, und haben damit das DL-Problem gelöst.
BabystepGiantstepView_43=Weiter zu Schritt 3
BabystepGiantstepView_44=Schritt 3 - Berechnung der Babysteps
BabystepGiantstepView_47=Details zu Berechnung
BabystepGiantstepView_5=Eingabe des Erzeugers (g > 1):
BabystepGiantstepView_6=Eingabe des Gruppenelementes (a > 1):
BabystepGiantstepView_63=Die Berechnung der Giantsteps ist nicht nötig.
BabystepGiantstepView_64=In Schritt 4 berechnen wir die Giantsteps, indem wir d = g ^ m setzen und prüfen, ob für q = 1, 2, 3,... das Gruppenelement d ^ q als zweite Komponente eines Elementes \r\nvon B vorkommt, ob also ein Paar (r, d ^ q) zu B gehört. Sobald dies der Fall ist, gilt a * g ^ - r = d ^ q = g ^ (q * m), und das DL-Problem ist gelöst. 
BabystepGiantstepView_65=Weiter zu Schritt 4
BabystepGiantstepView_66=Schritt 4 - Berechnung der Giantsteps
BabystepGiantstepView_69=Details zur Berechnung
BabystepGiantstepView_75=Wir haben einen der Giantstepwerte in der Babystep-Menge als zweite Komponente des Paars (r, d ^ q) gefunden und finden somit den\ndiskreten Logarithmus 
BabystepGiantstepView_76=Dieser erfüllt die Gleichung: a = g ^ x mod G, in diesem Beispiel:   
BabystepGiantstepView_88=Es wurde kein Paar (r, d ^ q) in B gefunden, daher konnte für die eingegebenen Parameter keine Lösung des diskreten Logarithmus berechnet werden.
BabystepGiantstepView_90=Ergebnis anzeigen
BabystepGiantstepView_93=Eingaben zurücksetzen
BabystepGiantstepView_94=Ergebnis
BabystepGiantstepView_95=Es gibt kein multiplikatives Inverse von 
BabystepGiantstepView_96=in der zyklischen Gruppe 
BabystepGiantstepView_97=.\nBitte verwenden Sie andere Eingabeparameter. 
Parameter_0=Bitte nur Integer Werte verwenden. Das Gruppenelement darf kein Vielfaches der zyklischen Gruppe sein und umgekehrt.
Parameter_1=Parameter Verifizierung
Parameter_2=Abbrechen
Parameter_3=Nächste Primzahl