#Eclipse messages class
#HashWizard
#Group box 1 text
HashWizard_grpHashes=Hash methods
HashWizard_header=Select the hash method you want to use.
#Group box 2 text
HashWizard_grpDescription=Description
#The Texts for the descriptions of the methods
HashWizard_WindowTitle=Select the hashmethod
HashWizard_rdomd5_description=The algorithm takes as input a message of arbitrary length and produces as output a 128-bit "fingerprint" or "message digest" of the input. The MD5 algorithm is intended for digital signature applications, where a large file must be "compressed" in a secure manner before being encrypted with a private (secret) key under a public-key cryptosystem such as RSA.
HashWizard_rdosha1_description="Secure Hash Algorithm" for computing a condensed representation of a message or a data file. When a message of any length < 264 bits is input, the SHA-1 produces a 160-bit output. The SHA-1 is called secure because it is computationally infeasible to find a message which corresponds to a given message digest, or to find two different messages which produce the same message digest. Any change to a message in transit will, with very high probability, result in a different message digest, and the signature will fail to verify.
HashWizard_rdosha256_description=SHA-256 is one of the successor hash functions to SHA-1 (collectively referred to as SHA-2), and is one of the strongest hash functions available. While SHA-1 has not been compromised in real-world conditions, SHA-256 is not much more complex to code, and has not yet been compromised in any way. It is recommended to use this method instead of SHA-1.
HashWizard_rdosha384_description= SHA-384 is like SHA-256, but they differ in size (SHA-384 is truncated). The initial hash is calculated from the 64 decimal bits the square roots of the following primes (23, 29, etc.). In the end only the first six 64-bit words from the result are used. The the attached number indicates the length of each hash value (in bits).
HashWizard_rdosha512_description=SHA-256 and SHA-512 differ in the word size. SHA-256 uses 32-bit words where SHA-512 uses 64-bit words. The the attached number indicates the length of each hash value (in bits).
#Only with SHA-1 (SHA-1 with all 4). Everything else with RSA, ECDSA, RSA with MGF1
HashWizard_rdomd5=MD5
#MD5 only with RSA
HashWizard_rdosha1=SHA-1
HashWizard_rdosha256=SHA-256
HashWizard_rdosha384=SHA-384
HashWizard_rdosha512=SHA-512
#SignatureWizard
#Group box 1 text
SignatureWizard_header=Select the signature method you want to use.
SignatureWizard_grpSignatures=Signature methods
#Group box 2 text
SignatureWizard_WindowTitle=Select the signature method
SignatureWizard_grpDescription=Description
SignatureWizard_DSA_description=The Digital Signature Algorithm (DSA) is a United States Federal Government standard for digital signatures. With DSA, the entropy, secrecy, and uniqueness of the random signature value is critical. It is so critical that violating any one of those three requirements can reveal the entire private key to an attacker. Using the same value twice (even while keeping random signature value secret), using a predictable value, or leaking even a few bits of k in each of several signatures, is enough to break DSA.
SignatureWizard_RSA_description=RSA is an algorithm for public-key cryptography that is based on the presumed difficulty of factoring large integers, the factoring problem. Anyone can use the public key to encrypt a message, but with currently published methods, if the public key is large enough, only someone with knowledge of the prime factors can feasibly decode the message. Secure padding schemes such as RSA-PSS are as essential for the security of message signing as they are for message encryption. 
SignatureWizard_ECDSA_description=The Elliptic Curve Digital Signature Algorithm (ECDSA) is the elliptic curve analogue of the Digital Signature Algorithm (DSA). s. Unlike the ordinary discrete logarithm problem and the integer factorization problem, no subexponential-time algorithm is known for the elliptic curve discrete logarithm problem. As with elliptic curve cryptography in general, the bit size of the public key believed to be needed for ECDSA is about twice the size of the security level, in bits.
SignatureWizard_RSAandMGF1_description=?
#Only with SHA-1 (SHA-1 with all 4). Everything else with RSA, ECDSA, RSA with MGF1
SignatureWizard_DSA=DSA
#MD5 only with RSA
SignatureWizard_RSA=RSA
SignatureWizard_ECDSA=ECDSA
SignatureWizard_RSAandMGF1=RSA and MGF1
#SignatureWizard_rdosha512=SHA-512
#InputWizard
#Page 1
InputWizard_WindowTitle=Select input
InputWizard_title=Choose an input for the demonstration
InputWizard_header=Please choose whether you want to open an existing document or enter a text.
InputWizard_rdoFromFile=From file
InputWizard_rdoFromEditor=From editor (direct input)
InputWizard_FileOpenDialog=Open file
#Page 2
InputFileWizard_WindowTitle=Select input
InputFileWizard_title=Choose a file
InputFileWizard_header=Please select the file you want to use for this demonstration. You can choose any filetype you want. 
InputFileWirard_btnBrowse=Browse
#Page 3
InputEditorWizard_WindowTitle=Select input
InputEditorWizard_title=Enter text
InputEditorWizard_header=Please enter the text you want to use for this demonstration.
InputEditorWizard_Label=Click Finish to save the text and continue.

#Mouseover Texts
Visual.name.0=Signature Creation
view.name.0=Signature Creation
